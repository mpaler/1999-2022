<?php
/**
 * @file
 * Code for the Swaylocks Marketing feature.
 */

include_once 'swaylocks_marketing.features.inc';

/**
 * The implementing module may now alter a non-delivery report analysis.
 *
 * The provided analysis will have the following format:
 *
 * array(
 *   'code' => $code or '' // the code assigned to the non-delivery report
 *   'mail' => $mail or '' // the delivery address of the original email
 * )
 *
 * @param array $analysis
 *   An analysis produced by an analyst component.
 * @param array $report
 *   A non-delivery report email, formatted as an array of parts.
 *
 * @see hook_bounce_analyst()
 */
function swaylocks_marketing_bounce_analysis_alter(&$analysis, $report) {

   /*
  ---------------------------------------------------------------
  Look through the non-delivery report email headers first.
  ---------------------------------------------------------------
  */

  $header_part = array_shift($report);
  $headers = array();
  foreach ($header_part['data'] as $name => $value) {
    $headers[drupal_strtolower($name)] = $value;
  }

  // Check to see whether this a standard ARF (abuse reporting format) email.
  if (swaylocks_marketing_analysis_is_abuse_response_format($headers)) {
    $analysis['code'] = 'abusereport';
  }

    /*
  ---------------------------------------------------------------
  Now try to identify the email address for the originating email.
  ---------------------------------------------------------------
  */

  $ignored_mails = bounce_analysis_ignored_mails();

  // Try to find the original header ID that will link this non-delivery
  // report to an email address, or more than one email address if the
  // original was sent to multiple destinations.
  //
  // This may or may not work: not all non-delivery report formats include
  // the headers of the original mail.
  foreach ($report as $part) {
    $match = array();
    $matched = preg_match('/' . variable_get('bounce_mail_header_name', BOUNCE_DEFAULT_MAIL_HEADER_NAME) . '\s*:\s*([^\s\r\n]+)/i', $part['data'], $match);
    if ($matched) {
      $analysis['header_id'] = $match[1];
      $mails = db_select('bounce_sent', 's')
        ->condition('s.header_id', $analysis['header_id'], '=')
        ->fields('s', array('mail'))
        ->execute()
        ->fetchCol();
      $count = count($mails);
      if ($count == 1) {
        // This matches one address, so we are done here.
        $analysis['mail'] = array_shift($mails);
        return $analysis;
      }
      elseif ($count > 1) {
        // More of a challenge: since the original email was sent to multiple
        // addresses, we have to be sure that we correctly determine which is
        // the problem child that generated this non-delivery report.
        //
        // So loop through the parts again and get counts of the various
        // addresses. Pick the one with the highest count. This isn't
        // completely foolproof, but it is the best option going short of much
        // more fiddly rules, checks, and rules within checks.
        $mail = bounce_analysis_get_most_frequent_mail($report, $ignored_mails, $mails);
        // Note that the return will be empty if the two highest counts are
        // tied - unlikely, but you never know.
        if ($mail) {
          $analysis['mail'] = $mail;
        }
      }
    }
  }

  if ($use_vulnerable_search = variable_get('bounce_analyst_use_vulnerable_email_search')) {
    // If we don't have an email yet, then see if we can find one by more
    // direct means: find the most common email in the text and see if we
    // sent mail to it recently.
    //
    // Note that one reason for using UUIDs and a special header in the mail
    // is to make it hard for an attacker to send crafted mails to your
    // Return-Path address that will cause you to block future outgoing mails.
    // Not very likely, but why make it possible at all? When we move away from
    // UUID identifiers, we open that door.
    //
    // TODO: make this more sophisticated in an effort to avoid false positives
    // and attacks.
    //
    $mail = bounce_analysis_get_most_frequent_mail($report, $ignored_mails);
    if ($mail) {
      // Did we sent out an email within the last hour to this address? For the
      // reasons noted above, we want to ensure that this check is a short
      // timeline, to limit the opportunity for attacks using crafted emails
      // sent to the Return-Path address.
      $count = db_select('bounce_sent')
        ->condition('mail', $mail, '=')
        ->condition('created', time() - 3600, '>')
        ->countQuery()
        ->execute()
        ->fetchField();
      if ($count) {
        $analysis['mail'] = $mail;
      }
    }
  }
}

function swaylocks_marketing_analysis_is_abuse_response_format($headers) {
  # Pretty unlikely, but paranoia never hurts.
  if (!isset($headers['from'])) {
    return false;
  };

  return preg_match('/complaints@email-abuse.amazonses.com/i', $headers['from']);
}